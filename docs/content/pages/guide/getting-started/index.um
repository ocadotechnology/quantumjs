@inline ../../../shared/common.um
@quantum-titlebar Getting Started

@qm.content
  @section

    @h1: Getting Started

    @p: The quantum library consists of multiple modules that each provide a different set of transforms, both in terms of entities (e.g. @(@api) ) as well as functionality, such as creating versioned content.
    @p: This page is intended as a basic tutorial as to where to start and includes step-by-step instructions for how to build a basic project.

    @topicsection Installing Dependencies
      @p: The first step is to create a package.json in a new directory and then install the core module and the HTML module.
      @p: These are the minimum modules required for outputting to HTML.

      @p: First, create an empty directory called @code(bash)[my_project] and initialize the package.json:
      @@codeblock bash
        npm init

      @p: Then install the core and html modules:
      @codeblock bash
        npm install --save quantum-js quantum-html


    @topicsection Creating some content
      @p: For this example, we'll be creating some content in the @code(bash)[pages] directory and each page for the site will be called @code(um)[index.um].

      @p: This directory will be treated as the site root so we create an @code(um)[index.um] in the @code(bash)[pages] directory and add some content to the file:
      @@codeblock um
        @h1: My Page
        @p: Hello World!

      @p: Your structure should look like this:
      @@codeblock bash
        - my_project
        |- package.json # generated by npm init
        |- node_modules # created when installing dependencies
        |- pages
         |- index.um

      @p: This is enough to get started with the build script, we can add more content later.


    @topicsection Creating a build script
      @p: To start creating a build script, we first create a @code(bash)[build] directory in the root of the project, alongside @code(bash)[package.json], and then create @code(bash)[index.js] inside the newly created directory.
      @@codeblock bash
        - my_project
        |- package.json # generated by npm init
        |- node_modules # created when installing dependencies
        |- pages
         |- index.um
        |- build
         |- index.js

      @p: Once we've created @code(bash)[index.js], we can add a basic build script.

      @codeblock js
        // First, we require the quantum and html modules so we can access the api:
        var quantum = require('quantum-js')
        var html = require('quantum-html')

        // Then we use the read method to get all the content inside the pages directory with the name index.um
        quantum.read('pages/**/index.um', {base: 'pages'})

          // The read method returns an array of files that are then passed to html using map which renders the content to the virtual dom
          .map(html())

          // We then convert this content to string using html.stringify()
          .map(html.stringify())

          // And finally, we write all the generated pages to the target directory
          .map(quantum.write('target'))

      @p: The complete script without comments can be seen below:
      @codeblock js
        var quantum = require('quantum-js')
        var html = require('quantum-html')

        quantum.read('pages/**/index.um', {base: 'pages'})
          .map(html())
          .map(html.stringify())
          .map(quantum.write('target'))

      @p: We can then run @code(bash)[node build/index.js] to build the pages to the target directory.


    @topicsection Viewing the compiled site
      @p: For viewing the compiled site, it is recommended that a local server is used.
      @p: there are several tools available for this, however for this example we'll use @hyperlink(https://www.npmjs.com/package/live-server)[live-server]
      @codeblock bash
        npm install --save live-server

      @p: Create @code(bash)[server.js] in the build directory and add the following code:
      @codeblock js
        require('live-server').start({
          port: 9000,
          root: 'target',
          open: true
        })
      @p: When this code is run, a server will be started on port 9000 with the @code(bash)[target] as the root directory.

      @p: This can then be run from the root directory using:
      @codeblock bash
        node build/server.js

      @p: This will start a server and open a new tab. If you don't want it to open a new tab every time, set the @code(bash)[open] option to false.

      @p: This will allow us to navigate to @code(um)[http://localhost:9000] to see the site when we come to build it


    @topicsection Using npm tasks to build the site
      @p: npm tasks are a good alternative to using @code(bash)[node {file}]

      @p: To set them up, open @code(bash)[package.json] and add the following lines to the scripts section
      @codeblock json
        "server": "node build/server.js",
        "build": "node build/index.js",
        "start": "npm run build && npm run server"

      @p: Your @code(bash)[package.json] should now look similar to this:
      @codeblock json
        {
          "name": "my_project",
          "version": "1.0.0",
          "description": "",
          "main": "index.js",
          "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
            "server": "node build/server.js",
            "build": "node build/index.js",
            "start": "npm run build && npm run server"
          },
          "keywords": [],
          "license": "ISC",
          "dependencies": {
            "quantum-js": "^1.0.0",
            "quantum-html": "^1.0.0",
            "live-server": "^0.9.0"
          }
        }

      @p: Now we can run @code(bash)[npm run build] to build the pages and @code(bash)[npm run server] to start the server.
      @p: Additionally, we can run @code(bash)[npm start] to build the pages and start the server with one command.


    @topicsection Creating additional content
      @p: To create more pages for the site, first create a directory with the desired page name and then create an @code(um)[index.um] file inside it.
      @p: For this example, we'll create a @code(bash)[demo] page.

      @p: Create the @code(bash)[demo] directory inside the @code(bash)[pages] and add an @code(um)[index.um] file with some content:

      @@codeblock um
        @h1: Demo
        @p: Demo page
        @hyperlink(/)[Home]

      @@codeblock bash
        - my_project
        |- package.json
        |- node_modules
        |- pages
         |- index.um
         |- demo
          |- index.um
        |- build
         |- index.js
        |- target # generated by build script

      @p: Running @code(bash)[npm start] will then build the pages and if we navigate to @code(bash)[http://localhost:9000/demo] the new page will be shown.